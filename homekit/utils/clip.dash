#!/bin/sh

# Template for shell scripts
#
# Shell scripts that also can be used as modules/libraries for other scripts.
# When used as libraries this is how its done:
#
#
#
# Usage: [Options] [Commands]
#
# Options:
#   --help          show help
#   -w|--write      write to file (with a .sh extension)
#
# Commands
#   -pwd
#

set -eu

prn() { printf "%s" "$@"; }
fail() { echo "Fail: $*" >&2; }
info() { echo "$@" >&2; }
die() {
	echo "$@" >&2
	exit 1
}
usage() {
	perl -ne 'die "$1\n" if /^#\s+(Usage:.*)$/' "$0" >&2
	exit 1
}
help() {
	perl -ne 'print "$1\n" if /^\s*#\s+(.*)/; exit if /^\s*[^#\s]+/;' "$0" >&2
	exit 1
}

secstamp() { date +'%Y%m%d%H%M%S'; }

absdir() { (cd "${1}" && pwd -P); }

utils_clip__init() {
    :
}

utils_clip__get_cliphome() {

	local cliphome="$HOME/tmp/clipboard"
	[ -d "$cliphome" ] && mkdir -p "$cliphome"

	if [ -d "$cliphome" ]; then
		prn "$cliphome"
	else
		fail "could not get cliphome '$cliphome'"
		return 1
	fi
}

utils_clip__new_clipfile() {
	local clipdir="${1:-}"
	if [ -z "$clipdir" ] || ! [ -d "$clipdir" ]; then
		fail "clipdir '$clipdir' invalid"
		return 1
	fi

    local clippath=
    for i in $(seq 1 4); do 
        local secstamp
        secstamp="$(secstamp)" || {
            fail 'could not get secstamp'
            return 1
        }
        if [ -z "$secstamp" ] ; then
            fail 'could not get secstamp'
            return 1
        fi
	    local clippath_probe="$clipdir/$secstamp"
        if [ -f "$clippath_probe" ]; then
		    sleep 1
        else
            clippath="$clippath_probe"
            break
        fi
    done


    if [ -n "$clippath" ] ; then
        if [ -f "$clippath" ]; then
            fail "clippath already exists '$clippath'"
        else
            prn "$clippath"
        fi
    else
        fail "clippath could not be created'"
        return 1
    fi
}

utils_clip__get_last_clipfile() {
	local clipdir="${1:-}"

	if [ -z "$clipdir" ] || ! [ -d "$clipdir" ]; then
		fail "clipdir '$clipdir' invalid"
		return 1
	fi

	local clipfile=
	clipfile="$(ls "$clipdir" | sort -r | head -1)" 

    if [ -z "$clipfile" ] ; then
		fail 'could not fetch clipfile'
		return 1
    fi

	local clippath=
	clippath="$clipdir/$clipfile"

	if [ -f "$clippath" ]; then
		prn "$clippath"
	else
		fail "secfile '$clippath' invalid"
		return 1
	fi
}

utils_clip__run() {

	local opt_pwd=
	while [ $# -gt 0 ]; do
		case "$1" in
		-pwd) opt_pwd=1 ;;
		-*) 
            fail 'invalid option'
            return 1
            ;;
		*) break ;;
		esac
		shift
	done

	local clipdir
	clipdir="$(utils_clip__get_cliphome)" 

	if [ -t 0 ]; then
		local clipfile=
		clipfile="$(utils_clip__get_last_clipfile "$clipdir")" 

		cat "$clipfile"
	else
		local new_clipfile=
		new_clipfile="$(utils_clip__new_clipfile "$clipdir")" 

		while read -r line; do
			echo "$line" >>$new_clipfile
		done
	fi
}

utils_clip__main() {

    case "${1:-}" in
    -h | --help)
        perl -ne 'print "$1\n" if /^\s*#\s(.*)/; exit if /^\s*[^#\s]+/;' "$0" >&2
        exit 1
        ;;
    *) : ;;
    esac

    local libmain=
    #local libmain="$BKB_MAINSCRIPT_DIR/libmain.sh"
    if [ -n "${libmain:-}" ]; then
        . "$libmain" || die "Err: could not source libmain.sh"
    fi

} 

#### Modulino

if [ -z "${BKB_MAINSCRIPT_DIR:-}" ]; then
    BKB_MAINSCRIPT_DIR="$(absdir "$(dirname "$0")")" || die "Err: could not get absdir for '$0'"
    [ -d "$BKB_MAINSCRIPT_DIR" ] || die "Err: invalid dir for '$BKB_MAINSCRIPT_DIR' for '$0'"
    utils_clip__main "$@" && utils_clip__init && utils_clip__run "$@" || die "Abort ..."
else
    utils_clip__init || {
        fail "could not init"
        return 1
    }
fi
