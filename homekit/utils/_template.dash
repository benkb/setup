#!/bin/sh

# Template for shell scripts
#
# Shell scripts that also can be used as modules/libraries for other scripts.
# When used as libraries this is how its done:
# - First: set the the MODULINO=1
#
#
#
# Usage: [Options] [filter] [filename] [extension]
#
# Options:
#   --help          show help
#

set -u

prn() { printf "%s" "$@"; }
fail() { echo "Fail: $*" >&2; }
info() { echo "$@" >&2; }
die() {
	echo "$@" >&2
	exit 1
}

stamp() { date +'%Y%m%d%H%M%S'; }

template__libinit() {
	[ -n "${1:-}" ] && . "$1"
}

template__run(){
    local input="${1:-}"
    if [ -n "$input" ] ; then
        fail "no valid input '$input'"
        return 1
    fi
}


template__main() {
	local usage_pl='die "$1\n" if /^#\s+(Usage:.*)$/'
	local help_pl='print "$1\n" if /^\s*#\s+(.*)/; exit if /^\s*[^#\s]+/;'

	while [ $# -gt 0 ]; do
		case "$1" in
		-h | --help)
			perl -ne "$help_pl" "$0" >&2
			exit 1
			;;
		-*)
			info "unknown option"
			perl -ne "$usage_pl" "$0" >&2
			exit 1
			;;
		*) break ;;
		esac
		shift
	done

	if [ $# -gt 0 ]; then
        template__run "$@"
	else
		perl -ne "$usage_pl" "$0" >&2
		exit 1
	fi
}

if [ -z "${BKB_SCRIPT_MAINLIB:-}" ]; then
	BKB_SCRIPT_MAINLIB="$(dirname "$0" 2>/dev/null)/bkblib.sh"
	if [ -f "$BKB_SCRIPT_MAINLIB" ]; then
		template__libinit "$BKB_SCRIPT_MAINLIB" || die "Err: init failed with '$BKB_SCRIPT_MAINLIB'"
	fi
	template__main "$@" || die "Abort ..."
else
	template__libinit || {
		fail "(template__libinit): could not init"
		return 1
	}
fi
