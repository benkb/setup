#!/bin/sh

# Template for shell scripts
#
# Shell scripts that also can be used as modules/libraries for other scripts.
# When used as libraries this is how its done:
#
# Usage: [Options] [filename], or run with --help
#
# Options:
#   --help          show help
#

set -eu

prn() { printf "%s" "$@"; }
fail() { echo "Fail: $*" >&2; }
info() { echo "$@" >&2; }
die() {
    echo "$@" >&2
    exit 1
}

absdir() { (cd "${1}" && pwd -P); }
stamp() { date +'%Y%m%d%H%M%S'; }

utils_template__init() {
    :
}

utils_template__run() {


    local input=
    while [ $# -gt 0 ]; do
        case "$1" in
        -h|--help)
            fail "option reserved for cli"
            return 1
            ;;
        -*)
            fail "unknown option"
            return 1
            ;;
        *)
            input="$1"
            shift
            break
            ;;
        esac
        shift
    done

    if [ -z "$input" ]; then
        fail "no valid input '$input'"
        return 1
    fi
    echo iii $input
}

utils_template__main() {

    if [ $# -eq 0 ]; then
        perl -ne 'die "$1\n" if /^#\s+(Usage:.*)$/' "$0" >&2
        exit 1
    else
        case "$1" in
        -h | --help)
            perl -ne 'print "$1\n" if /^\s*#\s(.*)/; exit if /^\s*[^#\s]+/;' "$0" >&2
            exit 1
            ;;
        *) : ;;
        esac
    fi

    local libmain=
    #local libmain="$BKB_MAINSCRIPT_DIR/libmain.sh"
    if [ -n "${libmain:-}" ]; then
        . "$libmain" || die "Err: could not source libmain.sh"
    fi

} 

#### Modulino

if [ -z "${BKB_MAINSCRIPT_DIR:-}" ]; then
    BKB_MAINSCRIPT_DIR="$(absdir "$(dirname "$0")")" || die "Err: could not get absdir for '$0'"
    [ -d "$BKB_MAINSCRIPT_DIR" ] || die "Err: invalid dir for '$BKB_MAINSCRIPT_DIR' for '$0'"
    utils_template__main "$@" && utils_template__init && utils_template__run "$@" || die "Abort ..."
else
    utils_template__init || {
        fail "could not init"
        return 1
    }
fi
